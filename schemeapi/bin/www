#!/usr/bin/env node

const app = require('../app')
const debug = require('debug')('schemeapi:server')
const http = require('http')

const PORT = 8086
const HOST = '0.0.0.0'

app.set('port', PORT)

const server = http.createServer(app)

server.listen(PORT, HOST)
server.on('error', onError)
server.on('listening', onListening)

// Boilerplate stuff...
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind)
}